stages:
  - build

build:
  stage: build
  image:
    name: alpine:latest
    entrypoint: ['']
  before_script:
    - apk add --no-cache git curl jq
  variables:
    CONTAINER_REGISTRY: $CI_REGISTRY
  script:
    # Identify affected applications by checking changes in the Merge Request
    - echo "Identifying affected apps by this commit..."
    - |
      if [ "$CI_MERGE_REQUEST_IID" ]; then
        # Fetch changed files in the Merge Request using GitLab API
        RESPONSE=$(curl --silent --header "PRIVATE-TOKEN: $GITLAB_ACCESS_TOKEN" \
          "http://gitlab/api/v4/projects/$CI_PROJECT_ID/merge_requests/$CI_MERGE_REQUEST_IID/changes")

        # Debug: Print the response from GitLab API
        echo "API Response: $RESPONSE"

        # Check if the response is valid and contains changes
        if echo "$RESPONSE" | jq -e '.changes' >/dev/null; then
          # Extract changed paths and identify apps
          APPS_CHANGED=$(echo "$RESPONSE" | jq -r '.changes[].new_path' | grep '^apps/' | cut -d'/' -f2 | sort -u)
        else
          echo "No changes found or invalid response. Exiting...";
          exit 1;
        fi
      else
        echo "Not a Merge Request. Exiting...";
        exit 0;
      fi

    # Check if any apps were changed
    - |
      if [ -z "$APPS_CHANGED" ]; then
        echo "No affected applications found in this commit. Exiting...";
        exit 0;
      fi

    # Build Docker images for each affected app
    - |
      for app in $APPS_CHANGED; do
        echo "Building image for the app: $app";
        /kaniko/executor \
          --context "${CI_PROJECT_DIR}/apps/$app" \
          --dockerfile "${CI_PROJECT_DIR}/Dockerfile.prod" \
          --destination "$CONTAINER_REGISTRY/$CI_PROJECT_PATH/$app:${CI_COMMIT_SHA}" \
          --build-arg APP_NAME=$app;
      done
  only:
    - merge_requests
  tags:
    - kaniko
